pyproxy:
# "compose", "docker", "source"
  deploy_method: "compose"

# Compose
  compose:
    install_path: "/opt/pyproxy"
    name: pyproxy
    image: ghcr.io/6c656c65/pyproxy
    tag: latest
    bind_port:
      - 8080:8080
      - 5000:5000
    volumes:
      - source: /opt/pyproxy/logs
        target: /app/logs
        type: directory
      - source: /opt/pyproxy/config.ini
        target: /app/config.ini
        type: file
    environment:
      - name: PYPROXY_DEBUG
        value: "True"

# Docker
  docker:
    install_path: "/opt/pyproxy"
    name: pyproxy
    image: ghcr.io/6c656c65/pyproxy
    tag: latest
    bind_port:
      - 8080:8080
      - 5000:5000
    volumes:
      - source: /opt/pyproxy/logs
        target: /app/logs
        type: directory
      - source: /opt/pyproxy/config.ini
        target: /app/config.ini
        type: file
    environment:
      - name: PYPROXY_DEBUG
        value: "True"

# Source
  source:
    repo: "https://github.com/6C656C65/pyproxy.git"
    install_path: "/opt/pyproxy"
    venv_path: "/opt/pyproxy/venv"
    service_name: "pyproxy"

# These variables configure the config.ini file that will be copied to the machine.
# You must configure either a volume for the "compose" or "docker" method, or an argument for the "source" method.
config:
  server:
    host: "0.0.0.0"
    port: 8080

  logging:
    debug: false
    access_log: "./logs/access.log"
    block_log: "./logs/block.log"
    no_logging_access: false
    no_logging_block: false

  files:
    html_403: "assets/403.html"

  filtering:
    no_filter: false
    filter_mode: "local"
    blocked_sites: "config/blocked_sites.txt"
    blocked_url: "config/blocked_url.txt"

  options:
    shortcuts: "config/shortcuts.txt"
    custom_header: "config/custom_header.json"
    authorized_ips: "config/authorized_ips.txt"

  security:
    ssl_inspect: false
    inspect_ca_cert: "certs/ca/cert.pem"
    inspect_ca_key: "certs/ca/key.pem"
    inspect_certs_folder: "certs/"
    cancel_inspect: "config/cancel_inspect.txt"

  monitoring:
    flask_port: 5000
    flask_pass: "password"

  proxy:
    proxy_enable: false
    proxy_host: "127.0.0.1"
    proxy_port: 8081
